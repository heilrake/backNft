{
  "version": 3,
  "sources": ["../src/transaction.ts"],
  "sourcesContent": ["import assert from 'assert';\nimport type { Logging, Sequelize, Deferrable, PartlyRequired, Connection } from './index.js';\n\ntype AfterTransactionCommitCallback = (transaction: Transaction) => void | Promise<void>;\n\n/**\n * The transaction object is used to identify a running transaction.\n * It is created by calling `Sequelize.transaction()`.\n * To run a query under a transaction, you should pass the transaction in the options object.\n *\n * @class Transaction\n * @see {Sequelize.transaction}\n */\nexport class Transaction {\n\n  sequelize: Sequelize;\n\n  private readonly _afterCommitHooks: Set<AfterTransactionCommitCallback> = new Set();\n  private readonly savepoints: Transaction[] = [];\n  private readonly options: PartlyRequired<TransactionOptions, 'type' | 'isolationLevel' | 'readOnly'>;\n  private readonly parent: Transaction | null;\n  private readonly id: string;\n  private readonly name: string;\n  private finished: 'commit' | undefined;\n  private connection: Connection | undefined;\n\n  /**\n   * Creates a new transaction instance\n   *\n   * @param sequelize A configured sequelize Instance\n   * @param options An object with options\n   * @param [options.type] Sets the type of the transaction. Sqlite only\n   * @param [options.isolationLevel] Sets the isolation level of the transaction.\n   * @param [options.deferrable] Sets the constraints to be deferred or immediately checked. PostgreSQL only\n   */\n  constructor(sequelize: Sequelize, options: TransactionOptions) {\n    this.sequelize = sequelize;\n\n    // get dialect specific transaction options\n    // @ts-expect-error Typings for .queryGenerator are not available yet (this will error once that is resolved).\n    const generateTransactionId = this.sequelize.dialect\n      .queryGenerator\n      .generateTransactionId;\n\n    this.options = {\n      type: sequelize.options.transactionType,\n      isolationLevel: sequelize.options.isolationLevel,\n      readOnly: false,\n      ...options,\n    };\n\n    this.parent = this.options.transaction ?? null;\n\n    if (this.parent) {\n      this.id = this.parent.id;\n      this.parent.savepoints.push(this);\n      this.name = `${this.id}-sp-${this.parent.savepoints.length}`;\n    } else {\n      const id = generateTransactionId();\n      this.id = id;\n      this.name = id;\n    }\n\n    delete this.options.transaction;\n  }\n\n  /**\n   * Commit the transaction.\n   */\n  async commit(): Promise<void> {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be committed because it has been finished with state: ${this.finished}`);\n    }\n\n    try {\n      return await this.sequelize.getQueryInterface().commitTransaction(this, this.options);\n    } finally {\n      this.finished = 'commit';\n      await this.cleanup();\n      for (const hook of this._afterCommitHooks) {\n        // eslint-disable-next-line no-await-in-loop -- sequentially call hooks\n        await Reflect.apply(hook, this, [this]);\n      }\n    }\n  }\n\n  /**\n   * Rollback (abort) the transaction\n   */\n  async rollback(): Promise<void> {\n    if (this.finished) {\n      throw new Error(`Transaction cannot be rolled back because it has been finished with state: ${this.finished}`);\n    }\n\n    if (!this.connection) {\n      throw new Error('Transaction cannot be rolled back because it never started');\n    }\n\n    try {\n      return await this\n        .sequelize\n        .getQueryInterface()\n        .rollbackTransaction(this, this.options);\n    } finally {\n      await this.cleanup();\n    }\n  }\n\n  /**\n   * Called to acquire a connection to use and set the correct options on the connection.\n   * We should ensure all of the environment that's set up is cleaned up in `cleanup()` below.\n   *\n   * @param useCLS Defaults to true: Use CLS (Continuation Local Storage) with Sequelize. With CLS, all queries within the transaction callback will automatically receive the transaction object.\n   */\n  async prepareEnvironment(useCLS?: boolean) {\n    if (useCLS === undefined) {\n      useCLS = true;\n    }\n\n    let connection;\n    if (this.parent) {\n      connection = this.parent.connection;\n    } else {\n      connection = await this.sequelize.connectionManager.getConnection({\n        type: this.options.readOnly ? 'read' : 'write',\n        uuid: this.id,\n      });\n    }\n\n    assert(connection != null, 'Transaction failed to acquire Connection.');\n\n    connection.uuid = this.id;\n\n    this.connection = connection;\n\n    let result;\n    try {\n      await this.begin();\n      result = await this.setDeferrable();\n    } catch (error) {\n      try {\n        result = await this.rollback();\n      } finally {\n        throw error; // eslint-disable-line no-unsafe-finally -- while this will mask the error thrown by `rollback`, the previous error is more important.\n      }\n    }\n\n    if (useCLS && this.sequelize.Sequelize._cls) {\n      this.sequelize.Sequelize._cls.set('transaction', this);\n    }\n\n    return result;\n  }\n\n  async setDeferrable(): Promise<void> {\n    if (this.options.deferrable) {\n      await this\n        .sequelize\n        .getQueryInterface()\n        .deferConstraints(this, this.options);\n    }\n  }\n\n  async begin() {\n    const queryInterface = this.sequelize.getQueryInterface();\n\n    if (this.sequelize.dialect.supports.settingIsolationLevelDuringTransaction) {\n      await queryInterface.startTransaction(this, this.options);\n\n      return queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n    }\n\n    await queryInterface.setIsolationLevel(this, this.options.isolationLevel, this.options);\n\n    return queryInterface.startTransaction(this, this.options);\n  }\n\n  async cleanup(): Promise<void> {\n    // Don't release the connection if there's a parent transaction or\n    // if we've already cleaned up\n    if (this.parent || this.connection?.uuid === undefined) {\n      return;\n    }\n\n    this._clearCls();\n    const res = this.sequelize.connectionManager.releaseConnection(this.connection);\n    this.connection.uuid = undefined;\n\n    await res;\n  }\n\n  _clearCls() {\n    const cls = this.sequelize.Sequelize._cls;\n\n    if (cls && cls.get('transaction') === this) {\n      cls.set('transaction', null);\n    }\n  }\n\n  /**\n   * Adds a hook that is run after a transaction is committed.\n   *\n   * @param fn   A callback function that is called with the committed transaction\n   * @name afterCommit\n   * @memberof Sequelize.Transaction\n   */\n  afterCommit(fn: AfterTransactionCommitCallback): this {\n    if (typeof fn !== 'function') {\n      throw new TypeError('\"fn\" must be a function');\n    }\n\n    this._afterCommitHooks.add(fn);\n\n    return this;\n  }\n\n  /**\n   * Types can be set per-transaction by passing `options.type` to `sequelize.transaction`.\n   * Default to `DEFERRED` but you can override the default type by passing `options.transactionType` in `new Sequelize`.\n   * Sqlite only.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   await sequelize.transaction({ type: Sequelize.Transaction.TYPES.EXCLUSIVE }, transaction => {\n   *      // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property DEFERRED\n   * @property IMMEDIATE\n   * @property EXCLUSIVE\n   */\n  static get TYPES() {\n    return TRANSACTION_TYPES;\n  }\n\n  /**\n   * Isolation levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n   * Sequelize uses the default isolation level of the database, you can override this by passing `options.isolationLevel` in Sequelize constructor options.\n   *\n   * Pass in the desired level as the first argument:\n   *\n   * @example\n   * try {\n   *   const result = await sequelize.transaction({isolationLevel: Sequelize.Transaction.ISOLATION_LEVELS.SERIALIZABLE}, transaction => {\n   *     // your transactions\n   *   });\n   *   // transaction has been committed. Do something after the commit if required.\n   * } catch(err) {\n   *   // do something with the err.\n   * }\n   *\n   * @property READ_UNCOMMITTED\n   * @property READ_COMMITTED\n   * @property REPEATABLE_READ\n   * @property SERIALIZABLE\n   */\n  static get ISOLATION_LEVELS() {\n    return ISOLATION_LEVELS;\n  }\n\n  /**\n   * Possible options for row locking. Used in conjunction with `find` calls:\n   *\n   * @example\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: t1.LOCK...\n   * });\n   *\n   * @example <caption>Postgres also supports specific locks while eager loading by using OF:</caption>\n   * UserModel.findAll({\n   *   where: ...,\n   *   include: [TaskModel, ...],\n   *   transaction: t1,\n   *   lock: {\n   *     level: t1.LOCK...,\n   *     of: UserModel\n   *   }\n   * });\n   *\n   * # UserModel will be locked but TaskModel won't!\n   *\n   * @example <caption>You can also skip locked rows:</caption>\n   * // t1 is a transaction\n   * Model.findAll({\n   *   where: ...,\n   *   transaction: t1,\n   *   lock: true,\n   *   skipLocked: true\n   * });\n   * # The query will now return any rows that aren't locked by another transaction\n   *\n   * @returns possible options for row locking\n   * @property UPDATE\n   * @property SHARE\n   * @property KEY_SHARE Postgres 9.3+ only\n   * @property NO_KEY_UPDATE Postgres 9.3+ only\n   */\n  static get LOCK() {\n    return LOCK;\n  }\n\n  /**\n   * Same as {@link Transaction.LOCK}, but can also be called on instances of\n   * transactions to get possible options for row locking directly from the\n   * instance.\n   */\n  get LOCK() {\n    return LOCK;\n  }\n}\n\n/**\n * Isolations levels can be set per-transaction by passing `options.isolationLevel` to `sequelize.transaction`.\n * Default to `REPEATABLE_READ` but you can override the default isolation level by passing `options.isolationLevel` in `new Sequelize`.\n *\n * The possible isolations levels to use when starting a transaction:\n *\n * ```js\n * {\n *   READ_UNCOMMITTED: \"READ UNCOMMITTED\",\n *   READ_COMMITTED: \"READ COMMITTED\",\n *   REPEATABLE_READ: \"REPEATABLE READ\",\n *   SERIALIZABLE: \"SERIALIZABLE\"\n * }\n * ```\n *\n * Pass in the desired level as the first argument:\n *\n * ```js\n * try {\n *   await sequelize.transaction({isolationLevel: Sequelize.Transaction.SERIALIZABLE}, transaction => {\n *      // your transactions\n *   });\n *   // transaction has been committed. Do something after the commit if required.\n * } catch(err) {\n *   // do something with the err.\n * }\n * ```\n */\nexport enum ISOLATION_LEVELS {\n  READ_UNCOMMITTED = 'READ UNCOMMITTED',\n  READ_COMMITTED = 'READ COMMITTED',\n  REPEATABLE_READ = 'REPEATABLE READ',\n  SERIALIZABLE = 'SERIALIZABLE',\n}\n\nexport enum TRANSACTION_TYPES {\n  DEFERRED = 'DEFERRED',\n  IMMEDIATE = 'IMMEDIATE',\n  EXCLUSIVE = 'EXCLUSIVE',\n}\n\n/**\n * Possible options for row locking. Used in conjunction with `find` calls:\n *\n * ```js\n * t1 // is a transaction\n * t1.LOCK.UPDATE,\n * t1.LOCK.SHARE,\n * t1.LOCK.KEY_SHARE, // Postgres 9.3+ only\n * t1.LOCK.NO_KEY_UPDATE // Postgres 9.3+ only\n * ```\n *\n * Usage:\n * ```js\n * t1 // is a transaction\n * Model.findAll({\n *   where: ...,\n *   transaction: t1,\n *   lock: t1.LOCK...\n * });\n * ```\n *\n * Postgres also supports specific locks while eager loading by using OF:\n * ```js\n * UserModel.findAll({\n *   where: ...,\n *   include: [TaskModel, ...],\n *   transaction: t1,\n *   lock: {\n *   level: t1.LOCK...,\n *   of: UserModel\n *   }\n * });\n * ```\n * UserModel will be locked but TaskModel won't!\n */\nexport enum LOCK {\n  UPDATE = 'UPDATE',\n  SHARE = 'SHARE',\n  /**\n   * Postgres 9.3+ only\n   */\n  KEY_SHARE = 'KEY SHARE',\n  /**\n   * Postgres 9.3+ only\n   */\n  NO_KEY_UPDATE = 'NO KEY UPDATE',\n}\n\n/**\n * Options provided when the transaction is created\n */\nexport interface TransactionOptions extends Logging {\n  readOnly?: boolean;\n  autocommit?: boolean;\n  isolationLevel?: ISOLATION_LEVELS;\n  type?: TRANSACTION_TYPES;\n  deferrable?: string | Deferrable.Deferrable;\n  /**\n   * Parent transaction.\n   */\n  transaction?: Transaction | null;\n}\n"],
  "mappings": "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",
  "names": []
}
