{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/index.ts"],
  "sourcesContent": ["export type DialectSupports = {\n  'DEFAULT': boolean,\n  'DEFAULT VALUES': boolean,\n  'VALUES ()': boolean,\n  'LIMIT ON UPDATE': boolean,\n  'ON DUPLICATE KEY': boolean,\n  'ORDER NULLS': boolean,\n  'UNION': boolean,\n  'UNION ALL': boolean,\n  'RIGHT JOIN': boolean,\n  EXCEPTION: boolean,\n\n  forShare?: 'LOCK IN SHARE MODE' | 'FOR SHARE' | undefined,\n  lock: boolean,\n  lockOf: boolean,\n  lockKey: boolean,\n  lockOuterJoinFailure: boolean,\n  skipLocked: boolean,\n  finalTable: boolean,\n\n  /* does the dialect support returning values for inserted/updated fields */\n  returnValues: false | {\n    output: boolean,\n    returning: boolean,\n  },\n\n  /* features specific to autoIncrement values */\n  autoIncrement: {\n    /* does the dialect require modification of insert queries when inserting auto increment fields */\n    identityInsert: boolean,\n\n    /* does the dialect support inserting default/null values for autoincrement fields */\n    defaultValue: boolean,\n\n    /* does the dialect support updating autoincrement fields */\n    update: boolean,\n  },\n  /* Do we need to say DEFAULT for bulk insert */\n  bulkDefault: boolean,\n  schemas: boolean,\n  transactions: boolean,\n  settingIsolationLevelDuringTransaction: boolean,\n  transactionOptions: {\n    type: boolean,\n  },\n  migrations: boolean,\n  upserts: boolean,\n  inserts: {\n    ignoreDuplicates: string, /* dialect specific words for INSERT IGNORE or DO NOTHING */\n    updateOnDuplicate: boolean | string, /* whether dialect supports ON DUPLICATE KEY UPDATE */\n    onConflictDoNothing: string, /* dialect specific words for ON CONFLICT DO NOTHING */\n    conflictFields: boolean, /* whether the dialect supports specifying conflict fields or not */\n  },\n  constraints: {\n    restrict: boolean,\n    addConstraint: boolean,\n    dropConstraint: boolean,\n    unique: boolean,\n    default: boolean,\n    check: boolean,\n    foreignKey: boolean,\n    primaryKey: boolean,\n    onUpdate: boolean,\n  },\n  index: {\n    collate: boolean,\n    length: boolean,\n    parser: boolean,\n    concurrently: boolean,\n    type: boolean,\n    using: boolean | number,\n    functionBased: boolean,\n    operator: boolean,\n    where: boolean,\n  },\n  groupedLimit: boolean,\n  indexViaAlter: boolean,\n  JSON: boolean,\n  JSONB: boolean,\n  ARRAY: boolean,\n  RANGE: boolean,\n  NUMERIC: boolean,\n  GEOMETRY: boolean,\n  GEOGRAPHY: boolean,\n  REGEXP: boolean,\n  HSTORE: boolean,\n  TSVECTOR: boolean,\n  deferrableConstraints: boolean,\n  tmpTableTrigger: boolean,\n  indexHints: boolean,\n  searchPath: boolean,\n};\n\nexport abstract class AbstractDialect {\n  /**\n   * List of features this dialect supports.\n   *\n   * Important: Dialect implementations inherit these values.\n   * When changing a default, ensure the implementations still properly declare which feature they support.\n   */\n  static readonly supports: DialectSupports = {\n    DEFAULT: true,\n    'DEFAULT VALUES': false,\n    'VALUES ()': false,\n    'LIMIT ON UPDATE': false,\n    'ON DUPLICATE KEY': true,\n    'ORDER NULLS': false,\n    UNION: true,\n    'UNION ALL': true,\n    'RIGHT JOIN': true,\n    EXCEPTION: false,\n    lock: false,\n    lockOf: false,\n    lockKey: false,\n    lockOuterJoinFailure: false,\n    skipLocked: false,\n    finalTable: false,\n    returnValues: false,\n    autoIncrement: {\n      identityInsert: false,\n      defaultValue: true,\n      update: true,\n    },\n    bulkDefault: false,\n    schemas: false,\n    transactions: true,\n    settingIsolationLevelDuringTransaction: true,\n    transactionOptions: {\n      type: false,\n    },\n    migrations: true,\n    upserts: true,\n    inserts: {\n      ignoreDuplicates: '',\n      updateOnDuplicate: false,\n      onConflictDoNothing: '',\n      conflictFields: false,\n    },\n    constraints: {\n      restrict: true,\n      addConstraint: true,\n      dropConstraint: true,\n      unique: true,\n      default: false,\n      check: true,\n      foreignKey: true,\n      primaryKey: true,\n      onUpdate: true,\n    },\n    index: {\n      collate: true,\n      length: false,\n      parser: false,\n      concurrently: false,\n      type: false,\n      using: true,\n      functionBased: false,\n      operator: false,\n      where: false,\n    },\n    groupedLimit: true,\n    indexViaAlter: false,\n    JSON: false,\n    JSONB: false,\n    NUMERIC: false,\n    ARRAY: false,\n    RANGE: false,\n    GEOMETRY: false,\n    REGEXP: false,\n    GEOGRAPHY: false,\n    HSTORE: false,\n    TSVECTOR: false,\n    deferrableConstraints: false,\n    tmpTableTrigger: false,\n    indexHints: false,\n    searchPath: false,\n  };\n\n  get supports(): DialectSupports {\n    const Dialect = this.constructor as typeof AbstractDialect;\n\n    return Dialect.supports;\n  }\n\n  // TODO: Replace with QueryGenerator class once its typings are complete.\n  declare readonly queryGenerator: unknown;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AA6FO,sBAA+B;AAAA,SAOpB,WAA4B;AAAA,IAC1C,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,aAAa;AAAA,IACb,mBAAmB;AAAA,IACnB,oBAAoB;AAAA,IACpB,eAAe;AAAA,IACf,OAAO;AAAA,IACP,aAAa;AAAA,IACb,cAAc;AAAA,IACd,WAAW;AAAA,IACX,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,sBAAsB;AAAA,IACtB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,cAAc;AAAA,IACd,eAAe;AAAA,MACb,gBAAgB;AAAA,MAChB,cAAc;AAAA,MACd,QAAQ;AAAA;AAAA,IAEV,aAAa;AAAA,IACb,SAAS;AAAA,IACT,cAAc;AAAA,IACd,wCAAwC;AAAA,IACxC,oBAAoB;AAAA,MAClB,MAAM;AAAA;AAAA,IAER,YAAY;AAAA,IACZ,SAAS;AAAA,IACT,SAAS;AAAA,MACP,kBAAkB;AAAA,MAClB,mBAAmB;AAAA,MACnB,qBAAqB;AAAA,MACrB,gBAAgB;AAAA;AAAA,IAElB,aAAa;AAAA,MACX,UAAU;AAAA,MACV,eAAe;AAAA,MACf,gBAAgB;AAAA,MAChB,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,OAAO;AAAA,MACP,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,UAAU;AAAA;AAAA,IAEZ,OAAO;AAAA,MACL,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,cAAc;AAAA,MACd,MAAM;AAAA,MACN,OAAO;AAAA,MACP,eAAe;AAAA,MACf,UAAU;AAAA,MACV,OAAO;AAAA;AAAA,IAET,cAAc;AAAA,IACd,eAAe;AAAA,IACf,MAAM;AAAA,IACN,OAAO;AAAA,IACP,SAAS;AAAA,IACT,OAAO;AAAA,IACP,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,uBAAuB;AAAA,IACvB,iBAAiB;AAAA,IACjB,YAAY;AAAA,IACZ,YAAY;AAAA;AAAA,MAGV,WAA4B;AAC9B,UAAM,UAAU,KAAK;AAErB,WAAO,QAAQ;AAAA;AAAA;",
  "names": []
}
