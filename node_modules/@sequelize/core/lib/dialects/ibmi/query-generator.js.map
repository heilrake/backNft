{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/query-generator.js"],
  "sourcesContent": ["'use strict';\n\nconst Utils = require('../../utils');\nconst util = require('util');\nconst _ = require('lodash');\nconst AbstractQueryGenerator = require('../abstract/query-generator');\nconst DataTypes = require('../../data-types');\nconst Model = require('../../model');\nconst SqlString = require('../../sql-string');\n\nconst typeWithoutDefault = new Set(['BLOB']);\n\nclass IBMiQueryGenerator extends AbstractQueryGenerator {\n\n  // Version queries\n  versionQuery() {\n    return 'SELECT CONCAT(OS_VERSION, CONCAT(\\'.\\', OS_RELEASE)) AS VERSION FROM SYSIBMADM.ENV_SYS_INFO';\n  }\n\n  // Schema queries\n  createSchema(schema) {\n    return `CREATE SCHEMA \"${schema}\"`;\n  }\n\n  dropSchema(schema) {\n    return `BEGIN IF EXISTS (SELECT * FROM SYSIBM.SQLSCHEMAS WHERE TABLE_SCHEM = ${schema ? `'${schema}'` : 'CURRENT SCHEMA'}) THEN SET TRANSACTION ISOLATION LEVEL NO COMMIT; DROP SCHEMA \"${schema ? `${schema}` : 'CURRENT SCHEMA'}\"; COMMIT; END IF; END`;\n  }\n\n  showSchemasQuery(options) {\n    let skippedSchemas = '';\n    if (options.skip) {\n      for (let i = 0; i < options.skip.length; i++) {\n        skippedSchemas += ` AND SCHEMA_NAME != '${options.skip[i]}'`;\n      }\n    }\n\n    return `SELECT DISTINCT SCHEMA_NAME AS \"schema_name\" FROM QSYS2.SYSSCHEMAAUTH WHERE GRANTEE = CURRENT USER${skippedSchemas}`;\n  }\n\n  // Table queries\n  createTableQuery(tableName, attributes, options) {\n    const primaryKeys = [];\n    const foreignKeys = Object.create(null);\n    const attrStr = [];\n\n    for (const attr in attributes) {\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) {\n        continue;\n      }\n\n      const dataType = attributes[attr];\n\n      if (dataType.includes('PRIMARY KEY')) {\n        primaryKeys.push(attr);\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\n      } else {\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\n      }\n    }\n\n    let attributesClause = attrStr.join(', ');\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\n\n    if (options.uniqueKeys) {\n      // only need to sort primary keys once, don't do it in place\n      const sortedPrimaryKeys = [...primaryKeys];\n      sortedPrimaryKeys.sort();\n\n      _.each(options.uniqueKeys, (columns, indexName) => {\n        // sort the columns for each unique key, so they can be easily compared\n        // with the sorted primary key fields\n        const sortedColumnFields = [...columns.fields];\n        sortedColumnFields.sort();\n        // if primary keys === unique keys, then skip adding new constraint\n        const uniqueIsPrimary\n          = sortedColumnFields.length === primaryKeys.length\n          && sortedColumnFields.every((value, index) => {\n            return value === sortedPrimaryKeys[index];\n          });\n        if (uniqueIsPrimary) {\n          return true;\n        }\n\n        if (columns.customIndex) {\n          if (typeof indexName !== 'string') {\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\n          }\n\n          attributesClause += `, CONSTRAINT ${this.quoteIdentifier(indexName)} UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\n        }\n      });\n    }\n\n    if (pkString.length > 0) {\n      attributesClause += `, PRIMARY KEY (${pkString})`;\n    }\n\n    for (const fkey in foreignKeys) {\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\n      }\n    }\n\n    let tableObject;\n    if (typeof tableName === 'string') {\n      tableObject = { table: tableName };\n    } else {\n      tableObject = tableName;\n    }\n\n    return `BEGIN\n    DECLARE CONTINUE HANDLER FOR SQLSTATE VALUE '42710'\n      BEGIN END;\n      CREATE TABLE ${tableName.schema ? `\"${tableObject.schema}\".` : ''}\"${tableObject.table ? tableObject.table : tableObject.tableName}\" (${attributesClause});\n      END`;\n  }\n\n  dropTableQuery(tableName, options) {\n    let table = tableName;\n    let schema;\n\n    if (typeof table === 'object') {\n      schema = table.schema || undefined;\n      table = table.table;\n    } else if (options.schema) {\n      schema = options.schema;\n    }\n\n    return `DROP TABLE IF EXISTS ${schema ? `\"${schema}\".` : ''}\"${table}\"`;\n  }\n\n  describeTableQuery(tableName, schema) {\n\n    const sql\n    = `SELECT\n    QSYS2.SYSCOLUMNS.*,\n    QSYS2.SYSCST.CONSTRAINT_NAME,\n    QSYS2.SYSCST.CONSTRAINT_TYPE\n    FROM\n    QSYS2.SYSCOLUMNS\n    LEFT OUTER JOIN\n      QSYS2.SYSCSTCOL\n    ON\n      QSYS2.SYSCOLUMNS.TABLE_SCHEMA = QSYS2.SYSCSTCOL.TABLE_SCHEMA\n      AND\n      QSYS2.SYSCOLUMNS.TABLE_NAME = QSYS2.SYSCSTCOL.TABLE_NAME\n      AND\n      QSYS2.SYSCOLUMNS.COLUMN_NAME = QSYS2.SYSCSTCOL.COLUMN_NAME\n    LEFT JOIN\n      QSYS2.SYSCST\n    ON\n      QSYS2.SYSCSTCOL.CONSTRAINT_NAME = QSYS2.SYSCST.CONSTRAINT_NAME\n    WHERE QSYS2.SYSCOLUMNS.TABLE_SCHEMA = ${schema ? `'${schema}'` : 'CURRENT SCHEMA'} AND QSYS2.SYSCOLUMNS.TABLE_NAME = '${tableName}'`;\n\n    return sql;\n  }\n\n  showTablesQuery(schema) {\n    return `SELECT TABLE_NAME FROM SYSIBM.SQLTABLES WHERE TABLE_TYPE = 'TABLE' AND TABLE_SCHEM = ${schema ? `'${schema}'` : 'CURRENT SCHEMA'}`;\n  }\n\n  addColumnQuery(table, key, dataType) {\n    dataType.field = key;\n    const definition = this.attributeToSQL(dataType, {\n      context: 'addColumn',\n      tableName: table,\n      foreignKey: key,\n    });\n\n    return `ALTER TABLE ${this.quoteTable(table)} ADD ${this.quoteIdentifier(key)} ${definition}`;\n  }\n\n  removeColumnQuery(tableName, attributeName) {\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP COLUMN ${this.quoteIdentifier(attributeName)}`;\n  }\n\n  changeColumnQuery(tableName, attributes) {\n    const attrString = [];\n    const constraintString = [];\n\n    for (const attributeName in attributes) {\n      let definition = attributes[attributeName];\n      if (definition.includes('REFERENCES')) {\n        const attrName = this.quoteIdentifier(attributeName);\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\n        const foreignKey = this.quoteIdentifier(`${attributeName}`);\n        constraintString.push(`${foreignKey} FOREIGN KEY (${attrName}) ${definition}`);\n      } else {\n        attrString.push(`\"${attributeName}\" SET DATA TYPE ${definition}`);\n      }\n    }\n\n    let finalQuery = '';\n    if (attrString.length) {\n      finalQuery += `ALTER COLUMN ${attrString.join(', ')}`;\n      finalQuery += constraintString.length ? ' ' : '';\n    }\n\n    if (constraintString.length) {\n      finalQuery += `ADD CONSTRAINT ${constraintString.join(', ')}`;\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} ${finalQuery}`;\n  }\n\n  renameTableQuery(before, after) {\n    return `RENAME TABLE ${this.quoteTable(before)} TO ${this.quoteTable(after)}`;\n  }\n\n  renameColumnQuery(tableName, attrBefore, attributes) {\n    const attrString = [];\n\n    for (const attrName in attributes) {\n      const definition = attributes[attrName];\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\n    }\n\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\n  }\n\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\n    if (smth instanceof Utils.Json) {\n      // Parse nested object\n      if (smth.conditions) {\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.quoteIdentifier(condition.path[0])}->>'$.${_.tail(condition.path).join('.')}' = '${condition.value}'`);\n\n        return conditions.join(' and ');\n      }\n\n      if (smth.path) {\n        let str;\n\n        // Allow specifying conditions using the sqlite json functions\n        if (this._checkValidJsonStatement(smth.path)) {\n          str = smth.path;\n        } else {\n          // Also support json dot notation\n          let path = smth.path;\n          let startWithDot = true;\n\n          // Convert .number. to [number].\n          path = path.replace(/\\.(\\d+)\\./g, '[$1].');\n          // Convert .number$ to [number]\n          path = path.replace(/\\.(\\d+)$/, '[$1]');\n\n          path = path.split('.');\n\n          let columnName = path.shift();\n          const match = columnName.match(/\\[\\d+\\]$/);\n          // If columnName ends with [\\d+]\n          if (match !== null) {\n            path.unshift(columnName.slice(match.index));\n            columnName = columnName.slice(0, Math.max(0, match.index));\n            startWithDot = false;\n          }\n\n          str = `${this.quoteIdentifier(columnName)}->>'$${startWithDot ? '.' : ''}${path.join('.')}'`;\n        }\n\n        if (smth.value) {\n          str += util.format(' = %s', this.escape(smth.value));\n        }\n\n        return str;\n      }\n    } else if (smth instanceof Utils.Cast) {\n      if (/timestamp/i.test(smth.type)) {\n        smth.type = 'timestamp';\n      } else if (smth.json && /boolean/i.test(smth.type)) {\n        // true or false cannot be casted as booleans within a JSON structure\n        smth.type = 'char';\n      } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\n        smth.type = 'integer';\n      } else if (/text/i.test(smth.type)) {\n        smth.type = 'char';\n      }\n    }\n\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\n  }\n\n  escape(value, field, options) {\n    options = options || {};\n\n    if (value !== null && value !== undefined) {\n      if (value instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(value);\n      }\n\n      if (field && field.type) {\n        this.validate(value, field, options);\n\n        if (field.type.stringify) {\n          // Users shouldn't have to worry about these args - just give them a function that takes a single arg\n          if (field.type._binary) {\n            field.type.escape = false;\n          }\n\n          const simpleEscape = escVal => SqlString.escape(escVal, this.options.timezone, this.dialect);\n\n          value = field.type.stringify(value, { escape: simpleEscape, field, timezone: this.options.timezone, operation: options.operation });\n\n          if (field.type.escape === false) {\n            // The data-type already did the required escaping\n            return value;\n          }\n        }\n      }\n    }\n\n    const format = (value === null && options.where);\n\n    return SqlString.escape(value, this.options.timezone, this.dialect, format);\n  }\n\n  /*\n    Returns an add index query.\n    Parameters:\n      - tableName -> Name of an existing table, possibly with schema.\n      - options:\n        - type: UNIQUE|FULLTEXT|SPATIAL\n        - name: The name of the index. Default is <table>_<attr1>_<attr2>\n        - fields: An array of attributes as string or as hash.\n                  If the attribute is a hash, it must have the following content:\n                  - name: The name of the attribute/column\n                  - length: An integer. Optional\n                  - order: 'ASC' or 'DESC'. Optional\n        - parser\n        - using\n        - operator\n        - concurrently: Pass CONCURRENT so other operations run while the index is created\n      - rawTablename, the name of the table, without schema. Used to create the name of the index\n   @private\n  */\n  addIndexQuery(tableName, _attributes, _options, rawTablename) {\n    let options = _options || Object.create(null);\n\n    if (!Array.isArray(_attributes)) {\n      options = _attributes;\n    } else {\n      options.fields = _attributes;\n    }\n\n    options.prefix = options.prefix || rawTablename || tableName;\n    if (options.prefix && typeof options.prefix === 'string') {\n      options.prefix = options.prefix.replace(/\\./g, '_');\n      options.prefix = options.prefix.replace(/(\"|')/g, '');\n    }\n\n    const fieldsSql = options.fields.map(field => {\n      if (typeof field === 'string') {\n        return this.quoteIdentifier(field);\n      }\n\n      if (field instanceof Utils.SequelizeMethod) {\n        return this.handleSequelizeMethod(field);\n      }\n\n      let result = '';\n\n      if (field.attribute) {\n        field.name = field.attribute;\n      }\n\n      if (!field.name) {\n        throw new Error(`The following index field has no name: ${util.inspect(field)}`);\n      }\n\n      result += this.quoteIdentifier(field.name);\n\n      if (this._dialect.supports.index.length && field.length) {\n        result += `(${field.length})`;\n      }\n\n      if (field.order) {\n        result += ` ${field.order}`;\n      }\n\n      return result;\n    });\n\n    if (!options.name) {\n      // Mostly for cases where addIndex is called directly by the user without an options object (for example in migrations)\n      // All calls that go through sequelize should already have a name\n      options = Utils.nameIndex(options, options.prefix);\n    }\n\n    options = Model._conformIndex(options);\n\n    if (!this._dialect.supports.index.type) {\n      delete options.type;\n    }\n\n    if (options.where) {\n      options.where = this.whereQuery(options.where);\n    }\n\n    if (typeof tableName === 'string') {\n      tableName = this.quoteIdentifiers(tableName);\n    } else {\n      tableName = this.quoteTable(tableName);\n    }\n\n    let schema;\n    if (typeof options.schema === 'string') {\n      schema = this.quoteIdentifiers(options.schema);\n    }\n\n    // Although the function is 'addIndex', and the values are passed through\n    // the 'indexes' key of a table, Db2 for i doesn't allow REFERENCES to\n    // work against a UNIQUE INDEX, only a UNIQUE constraint.\n    if (options.unique) {\n      return `BEGIN\n      DECLARE CONTINUE HANDLER FOR SQLSTATE VALUE '42891'\n        BEGIN END;\n        ALTER TABLE ${tableName} ADD CONSTRAINT ${this.quoteIdentifiers(options.name)} UNIQUE (${fieldsSql.join(', ')}${options.operator ? ` ${options.operator}` : ''})${options.where ? ` ${options.where}` : ''};\n      END`;\n    }\n\n    return `CREATE${options.unique ? ' UNIQUE' : ''} INDEX ${schema ? ` ${schema}.` : ''}${this.quoteIdentifiers(options.name)} ON ${tableName} (${fieldsSql.join(', ')}${options.operator ? ` ${options.operator}` : ''})${options.where ? ` ${options.where}` : ''}`;\n  }\n\n  addConstraintQuery(tableName, options) {\n    const query = super.addConstraintQuery(tableName, options);\n\n    return query.replace(/;$/, '');\n  }\n\n  // _toJSONValue(value) {\n  //   // true/false are stored as strings in mysql\n  //   if (typeof value === 'boolean') {\n  //     return value.toString();\n  //   }\n\n  //   // null is stored as a string in mysql\n  //   if (value === null) {\n  //     return 'null';\n  //   }\n\n  //   return value;\n  // }\n\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\n    const aliasTable = `temp_${this.quoteTable(tableName)}`;\n\n    let query = `MERGE INTO ${this.quoteTable(tableName)} `;\n\n    const usingClause = `USING (\n      SELECT * FROM (${this.quoteTable(tableName)}\n      VALUES(42)\n      ) AS ${aliasTable}(\"id\") ON (${aliasTable}.\"id\" = ${this.quoteTable(tableName)}.\"id\")`;\n\n    query += usingClause;\n    query += ` WHEN MATCHED THEN ${this.updateQuery(tableName, tableName, where, options, updateValues)}\n    WHEN NOT MATCHED THEN ${this.insertQuery(tableName, insertValues, model, options).sql}`;\n\n    return query;\n  }\n\n  insertQuery(table, valueHash, modelAttributes, options) {\n    // remove the final semi-colon\n    const query = super.insertQuery(table, valueHash, modelAttributes, options);\n    if (query.query[query.query.length - 1] === ';') {\n      query.query = query.query.slice(0, -1);\n      query.query = `SELECT * FROM FINAL TABLE (${query.query})`;\n    }\n\n    return query;\n  }\n\n  selectQuery(tableName, options, model) {\n    // remove the final semi-colon\n    let query = super.selectQuery(tableName, options, model);\n    if (query[query.length - 1] === ';') {\n      query = query.slice(0, -1);\n    }\n\n    return query;\n  }\n\n  bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes) {\n    // remove the final semi-colon\n    let query = super.bulkInsertQuery(tableName, fieldValueHashes, options, fieldMappedAttributes);\n    if (query[query.length - 1] === ';') {\n      query = query.slice(0, -1);\n      query = `SELECT * FROM FINAL TABLE (${query})`;\n    }\n\n    return query;\n  }\n\n  truncateTableQuery(tableName) {\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)} IMMEDIATE`;\n  }\n\n  deleteQuery(tableName, where, options = {}, model) {\n    let limit = '';\n    if (options.offset || options.limit) {\n      limit = this.addLimitAndOffset(options);\n    }\n\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\n\n    where = this.getWhereConditions(where, null, model, options);\n\n    if (where) {\n      query += ` WHERE ${where}`;\n    }\n\n    return query + limit;\n  }\n\n  /**\n   * Returns an SQL fragment for adding result constraints.\n   *\n   * @param  {object} options An object with selectQuery options.\n   * @returns {string}         The generated sql query.\n   * @private\n   */\n  addLimitAndOffset(options) {\n    let fragment = '';\n    const offset = options.offset;\n    const limit = options.limit;\n\n    if (offset) {\n      if (typeof offset === 'number' && Number.isSafeInteger(offset)) {\n        fragment += ` OFFSET ${offset} ROWS`;\n      } else {\n        console.warn('\"offset\" must be an integer. Offset is not added');\n      }\n    }\n\n    if (limit) {\n      fragment += ` FETCH NEXT ${limit} ROWS ONLY`;\n    }\n\n    return fragment;\n  }\n\n  // Indexes and constraints\n\n  showIndexesQuery(tableName) {\n    let table;\n    let schema;\n    if (typeof tableName === 'string') {\n      table = tableName;\n    } else {\n      table = tableName.tableName || tableName.table;\n      schema = tableName.schema;\n    }\n\n    const sql\n    = `select\n      QSYS2.SYSCSTCOL.CONSTRAINT_NAME as NAME,\n      QSYS2.SYSCSTCOL.COLUMN_NAME,\n      QSYS2.SYSCST.CONSTRAINT_TYPE,\n      QSYS2.SYSCST.TABLE_SCHEMA,\n      QSYS2.SYSCST.TABLE_NAME\n    from\n      QSYS2.SYSCSTCOL\n    left outer join\n      QSYS2.SYSCST\n    on\n      QSYS2.SYSCSTCOL.TABLE_SCHEMA = QSYS2.SYSCST.TABLE_SCHEMA\n      and\n      QSYS2.SYSCSTCOL.TABLE_NAME = QSYS2.SYSCST.TABLE_NAME\n      and\n      QSYS2.SYSCSTCOL.CONSTRAINT_NAME = QSYS2.SYSCST.CONSTRAINT_NAME\n    where\n      QSYS2.SYSCSTCOL.TABLE_SCHEMA = ${schema ? `'${schema}'` : 'CURRENT SCHEMA'}\n      and\n      QSYS2.SYSCSTCOL.TABLE_NAME = '${table}'\n    union\n    select\n      QSYS2.SYSKEYS.INDEX_NAME AS NAME,\n      QSYS2.SYSKEYS.COLUMN_NAME,\n      CAST('INDEX' AS VARCHAR(11)),\n      QSYS2.SYSINDEXES.TABLE_SCHEMA,\n      QSYS2.SYSINDEXES.TABLE_NAME\n    from\n      QSYS2.SYSKEYS\n    left outer join\n      QSYS2.SYSINDEXES\n    on\n      QSYS2.SYSKEYS.INDEX_NAME = QSYS2.SYSINDEXES.INDEX_NAME\n    where\n      QSYS2.SYSINDEXES.TABLE_SCHEMA = ${schema ? `'${schema}'` : 'CURRENT SCHEMA'}\n      and\n      QSYS2.SYSINDEXES.TABLE_NAME = '${table}'`;\n\n    return sql;\n  }\n\n  showConstraintsQuery(table, constraintName) {\n    const tableName = table.tableName || table;\n    const schemaName = table.schema;\n\n    let sql = [\n      'SELECT CONSTRAINT_NAME AS \"constraintName\",',\n      'CONSTRAINT_SCHEMA AS \"constraintSchema\",',\n      'CONSTRAINT_TYPE AS \"constraintType\",',\n      'TABLE_NAME AS \"tableName\",',\n      'TABLE_SCHEMA AS \"tableSchema\"',\n      'from QSYS2.SYSCST',\n      `WHERE table_name='${tableName}'`,\n    ].join(' ');\n\n    if (constraintName) {\n      sql += ` AND CONSTRAINT_NAME = '${constraintName}'`;\n    }\n\n    if (schemaName) {\n      sql += ` AND TABLE_SCHEMA = '${schemaName}'`;\n    }\n\n    return sql;\n  }\n\n  removeIndexQuery(tableName, indexNameOrAttributes) {\n    let indexName = indexNameOrAttributes;\n\n    if (typeof indexName !== 'string') {\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\n    }\n\n    return `BEGIN IF EXISTS (SELECT * FROM QSYS2.SYSINDEXES WHERE INDEX_NAME = '${indexName}') THEN DROP INDEX \"${indexName}\"; COMMIT; END IF; END`;\n  }\n\n  // bindParam(bind) {\n  //   return value => {\n  //     bind.push(value);\n\n  //     return '?';\n  //   };\n  // }\n\n  attributeToSQL(attribute, options) {\n    if (!_.isPlainObject(attribute)) {\n      attribute = {\n        type: attribute,\n      };\n    }\n\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\n    let template = attributeString;\n\n    if (attribute.type instanceof DataTypes.ENUM) {\n      if (attribute.type.values && !attribute.values) {\n        attribute.values = attribute.type.values;\n      }\n\n      // enums are a special case\n      template = attribute.type.toSql();\n      if (options && options.context) {\n        template += options.context === 'changeColumn' ? ' ADD' : '';\n      }\n\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\n        return this.escape(value);\n      }).join(', ')}))`;\n    } else {\n      template = attribute.type.toString(options);\n    }\n\n    if (attribute.allowNull === false) {\n      template += ' NOT NULL';\n    } else if (attribute.allowNull === true && (options && options.context === 'changeColumn')) {\n      template += ' DROP NOT NULL';\n    }\n\n    if (attribute.autoIncrement) {\n      template += ' GENERATED BY DEFAULT AS IDENTITY (START WITH 1, INCREMENT BY 1)';\n    }\n\n    // BLOB cannot have a default value\n    if (!typeWithoutDefault.has(attributeString)\n      && attribute.type._binary !== true\n      && Utils.defaultValueSchemable(attribute.defaultValue)) {\n      if (attribute.defaultValue === true) {\n        attribute.defaultValue = 1;\n      } else if (attribute.defaultValue === false) {\n        attribute.defaultValue = 0;\n      }\n\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\n    }\n\n    if (attribute.unique === true && !attribute.primaryKey) {\n      template += ' UNIQUE';\n    }\n\n    if (attribute.primaryKey) {\n      template += ' PRIMARY KEY';\n    }\n\n    // Db2 for i comments are a mess\n    // if (attribute.comment) {\n    //   template += ` ${options.context === 'changeColumn' ? 'ADD ' : ''}COMMENT ${this.escape(attribute.comment)}`;\n    // }\n\n    if (attribute.first) {\n      template += ' FIRST';\n    }\n\n    if (attribute.after) {\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\n    }\n\n    if (attribute.references) {\n\n      if (options && options.context === 'addColumn' && options.foreignKey) {\n        const attrName = this.quoteIdentifier(options.foreignKey);\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\n\n        template += ` ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\n      }\n\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\n\n      if (attribute.references.key) {\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\n      } else {\n        template += ` (${this.quoteIdentifier('id')})`;\n      }\n\n      if (attribute.onDelete) {\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\n      }\n\n      if (attribute.onUpdate && attribute.onUpdate.toUpperCase() !== 'CASCADE') {\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\n      }\n    }\n\n    return template;\n  }\n\n  attributesToSQL(attributes, options) {\n    const result = Object.create(null);\n\n    for (const key in attributes) {\n      const attribute = attributes[key];\n      attribute.field = attribute.field || key;\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\n    }\n\n    return result;\n  }\n\n  /**\n   * Generates an SQL query that returns all foreign keys of a table.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} schemaName The name of the schema.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeysQuery(table, schemaName) {\n    const quotedSchemaName = schemaName ? wrapSingleQuote(schemaName) : 'CURRENT SCHEMA';\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n\n    const sql = [\n      'SELECT FK_NAME AS \"constraintName\",',\n      'PKTABLE_CAT AS \"referencedTableCatalog\",',\n      'PKTABLE_SCHEM AS \"referencedTableSchema\",',\n      'PKTABLE_NAME AS \"referencedTableName\",',\n      'PKCOLUMN_NAME AS \"referencedColumnName\",',\n      'FKTABLE_CAT AS \"tableCatalog\",',\n      'FKTABLE_SCHEM AS \"tableSchema\",',\n      'FKTABLE_NAME AS \"tableName\",',\n      'FKTABLE_SCHEM AS \"tableSchema\",',\n      'FKCOLUMN_NAME AS \"columnName\"',\n      'FROM SYSIBM.SQLFOREIGNKEYS',\n      `WHERE FKTABLE_SCHEM = ${quotedSchemaName}`,\n      `AND FKTABLE_NAME = ${quotedTableName}`,\n    ].join(' ');\n\n    return sql;\n  }\n\n  /**\n   * Generates an SQL query that returns the foreign key constraint of a given column.\n   *\n   * @param  {object} table  The table.\n   * @param  {string} columnName The name of the column.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  getForeignKeyQuery(table, columnName) {\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : 'CURRENT SCHEMA';\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\n    const quotedColumnName = wrapSingleQuote(columnName);\n\n    const sql = [\n      'SELECT FK_NAME AS \"constraintName\",',\n      'PKTABLE_CAT AS \"referencedTableCatalog\",',\n      'PKTABLE_SCHEM AS \"referencedTableSchema\",',\n      'PKTABLE_NAME AS \"referencedTableName\",',\n      'PKCOLUMN_NAME AS \"referencedColumnName\",',\n      'FKTABLE_CAT AS \"tableCatalog\",',\n      'FKTABLE_SCHEM AS \"tableSchema\",',\n      'FKTABLE_NAME AS \"tableName\",',\n      'FKTABLE_SCHEM AS \"tableSchema\",',\n      'FKCOLUMN_NAME AS \"columnName\"',\n      'FROM SYSIBM.SQLFOREIGNKEYS',\n      `WHERE FKTABLE_SCHEM = ${quotedSchemaName}`,\n      `AND FKTABLE_NAME = ${quotedTableName}`,\n      `AND FKCOLUMN_NAME = ${quotedColumnName}`,\n    ].join(' ');\n\n    return sql;\n  }\n\n  /**\n   * Generates an SQL query that removes a foreign key from a table.\n   *\n   * @param  {string} tableName  The name of the table.\n   * @param  {string} foreignKey The name of the foreign key constraint.\n   * @returns {string}            The generated sql query.\n   * @private\n   */\n  dropForeignKeyQuery(tableName, foreignKey) {\n    return `ALTER TABLE ${this.quoteTable(tableName)}\n      DROP FOREIGN KEY ${this.quoteIdentifier(foreignKey)};`;\n  }\n\n  booleanValue(value) {\n    if (value) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  quoteIdentifier(identifier, _force) {\n    return Utils.addTicks(Utils.removeTicks(identifier, '\"'), '\"');\n  }\n}\n\n// private methods\nfunction wrapSingleQuote(identifier) {\n  return Utils.addTicks(identifier, '\\'');\n}\n\nexports.QueryGenerator = IBMiQueryGenerator;\n"],
  "mappings": "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",
  "names": []
}
