{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/data-types.js"],
  "sourcesContent": ["'use strict';\n\nconst moment = require('moment');\n\nmodule.exports = BaseTypes => {\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/db2/rbafzch2data.htm');\n\n  /**\n   * Removes unsupported Db2 for i options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\n   *\n   * @param {object} dataType The base integer data type.\n   * @private\n   */\n  function removeUnsupportedIntegerOptions(dataType) {\n    if (dataType._length || dataType.options.length || dataType._zerofill || dataType._unsigned) {\n      warn(`IBM i Db2 does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\n      dataType._length = undefined;\n      dataType.options.length = undefined;\n      dataType._unsigned = undefined;\n      dataType._zerofill = undefined;\n    }\n  }\n\n  /**\n   * @see https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/db2/rbafzch2data.htm\n   */\n\n  BaseTypes.DATE.types.ibmi = [93];\n  BaseTypes.STRING.types.ibmi = [12];\n  BaseTypes.CHAR.types.ibmi = [1];\n  BaseTypes.TEXT.types.ibmi = [12];\n  BaseTypes.TINYINT.types.ibmi = false;\n  BaseTypes.SMALLINT.types.ibmi = [5];\n  BaseTypes.MEDIUMINT.types.ibmi = false;\n  BaseTypes.INTEGER.types.ibmi = [4];\n  BaseTypes.BIGINT.types.ibmi = [-5];\n  BaseTypes.FLOAT.types.ibmi = [8];\n  BaseTypes.TIME.types.ibmi = [92];\n  BaseTypes.DATEONLY.types.ibmi = [91];\n  BaseTypes.BOOLEAN.types.ibmi = [5];\n  BaseTypes.BLOB.types.ibmi = [-4, -2];\n  BaseTypes.DECIMAL.types.ibmi = [3];\n  BaseTypes.UUID.types.ibmi = [1];\n  BaseTypes.ENUM.types.ibmi = false;\n  BaseTypes.REAL.types.ibmi = [7];\n  BaseTypes.DOUBLE.types.ibmi = [8];\n  BaseTypes.GEOMETRY.types.ibmi = false;\n  BaseTypes.JSON.types.ibmi = false;\n\n  class ENUM extends BaseTypes.ENUM {\n    toSql() {\n      return 'VARCHAR(255)';\n    }\n  }\n\n  class DATE extends BaseTypes.DATE {\n    toSql() {\n      return 'TIMESTAMP';\n    }\n\n    static parse(date) {\n      if (!date.includes('+')) {\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\n        const mome = moment.utc(date);\n\n        return mome.toDate();\n      }\n\n      const mome = moment.utc(date);\n\n      return mome.toDate();\n    }\n\n    _stringify(date, options) {\n      date = this._applyTimezone(date, options);\n\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\n    }\n  }\n\n  class UUID extends BaseTypes.UUID {\n    toSql() {\n      return 'CHAR(36)';\n    }\n  }\n\n  class DATEONLY extends BaseTypes.DATEONLY {\n    static parse(date) {\n      return date;\n    }\n  }\n\n  class BOOLEAN extends BaseTypes.BOOLEAN {\n    toSql() {\n      return 'SMALLINT';\n    }\n\n    _stringify(value) {\n      if (value) {\n        return 1;\n      }\n\n      return 0;\n    }\n\n    static parse(value) {\n      if (value) {\n        return true;\n      }\n\n      return false;\n    }\n  }\n\n  class STRING extends BaseTypes.STRING {\n    toSql() {\n      if (this._binary) {\n        return `BINARY(${this._length})`;\n      }\n\n      return super.toSql(this);\n    }\n\n    _stringify(value, options) {\n      if (Buffer.isBuffer(value)) {\n        return `BLOB(X'${value.toString('hex')}')`;\n      }\n\n      return value.toString();\n    }\n\n  }\n\n  class TEXT extends BaseTypes.TEXT {\n    toSql() {\n      let len = 0;\n      if (this._length) {\n        if (typeof this._length === 'string') {\n          switch (this._length.toLowerCase()) {\n            case 'tiny':\n              this._length = 256; // tiny = 2^8\n              break;\n            case 'medium':\n              this._length = 8192; // medium = 2^13 = 8k\n              break;\n            case 'long':\n              this._length = 65_536; // long = 64k\n              break;\n            default:\n              throw new Error('Unknown length value passed for TEXT type. Valid values are: positive integers, \"tiny\", \"medium\", and \"long\"');\n          }\n        } else if (!Number.isSafeInteger(this._length) || this._length <= 0) {\n          throw new Error('Unknown length for TEXT type. Valid values are: positive integers, \"tiny\", \"medium\", and \"long\"');\n        }\n      } else {\n        this._length = 8192;\n      }\n\n      if (this._length > 32_672) {\n        len = `CLOB(${this._length})`;\n      } else {\n        len = `VARCHAR(${this._length})`;\n      }\n\n      return len;\n    }\n  }\n\n  class CHAR extends BaseTypes.CHAR {\n    toSql() {\n      if (this._binary) {\n        return `CLOB(${this._length})`;\n      }\n\n      return super.toSql();\n    }\n  }\n\n  class NUMBER extends BaseTypes.NUMBER {\n    toSql() {\n      let result = this.key;\n      if (this._length) {\n        result += `(${this._length}`;\n        if (typeof this._decimals === 'number') {\n          result += `,${this._decimals}`;\n        }\n\n        result += ')';\n      }\n\n      return result;\n    }\n  }\n\n  class SMALLINT extends BaseTypes.SMALLINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class INTEGER extends BaseTypes.INTEGER {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BIGINT extends BaseTypes.BIGINT {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n\n    _stringify(value) {\n      return value.toString();\n    }\n\n    static parse(value) {\n      return value.toString();\n    }\n  }\n\n  class FLOAT extends BaseTypes.FLOAT {\n    constructor(length, decimals) {\n      super(length, decimals);\n      if (this._decimals) {\n        warn('Db2 for i does not support FLOAT with decimal scale. FLOAT will be used instead. If you want to specify scale, use DECIMAL or NUMERIC data types.');\n        this._length = undefined;\n        this._decimals = undefined;\n      }\n    }\n  }\n\n  class REAL extends BaseTypes.REAL {\n    constructor(length) {\n      super(length);\n      removeUnsupportedIntegerOptions(this);\n    }\n  }\n\n  class BLOB extends BaseTypes.BLOB {\n    toSql() {\n      if (this._length) {\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 255 bytes\n          return 'BLOB(255)';\n        }\n\n        if (this._length.toLowerCase() === 'medium') { // medium = 16M\n          return 'BLOB(16M)';\n        }\n\n        if (this._length.toLowerCase() === 'long') { // long = 2GB\n          return 'BLOB(2G)';\n        }\n\n        return `BLOB(${this._length})`;\n      }\n\n      return 'BLOB(1M)';\n    }\n\n    _stringify(value) {\n      if (Buffer.isBuffer(value)) {\n        return `BLOB('${value.toString().replace(/'/g, '\\'\\'')}')`;\n      }\n\n      if (Array.isArray(value)) {\n        value = Buffer.from(value);\n      } else {\n        value = Buffer.from(value.toString());\n      }\n\n      return `BLOB('${value}')`;\n    }\n\n    static parse(value) {\n      return Buffer.from(value);\n    }\n  }\n\n  function parseFloating(value) {\n    if (typeof value !== 'string') {\n      return value;\n    }\n\n    if (value === 'NaN') {\n      return NaN;\n    }\n\n    if (value === 'Infinity') {\n      return Infinity;\n    }\n\n    if (value === '-Infinity') {\n      return -Infinity;\n    }\n  }\n\n  for (const floating of [FLOAT, REAL]) {\n    floating.parse = parseFloating;\n  }\n\n  for (const num of [FLOAT, REAL, SMALLINT, INTEGER]) {\n    num.prototype.toSql = NUMBER.prototype.toSql;\n  }\n\n  return {\n    BOOLEAN,\n    DATE,\n    DATEONLY,\n    STRING,\n    CHAR,\n    NUMBER,\n    FLOAT,\n    ENUM,\n    REAL,\n    SMALLINT,\n    INTEGER,\n    BIGINT,\n    TEXT,\n    UUID,\n    BLOB,\n  };\n};\n"],
  "mappings": "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",
  "names": []
}
