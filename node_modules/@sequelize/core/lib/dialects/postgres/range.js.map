{
  "version": 3,
  "sources": ["../../../src/dialects/postgres/range.js"],
  "sourcesContent": ["'use strict';\n\nconst _ = require('lodash');\n\nfunction stringifyRangeBound(bound) {\n  if (bound === null) {\n    return '';\n  }\n\n  if (bound === Number.POSITIVE_INFINITY || bound === Number.NEGATIVE_INFINITY) {\n    return bound.toString().toLowerCase();\n  }\n\n  return JSON.stringify(bound);\n}\n\nfunction parseRangeBound(bound, parseType) {\n  if (!bound) {\n    return null;\n  }\n\n  if (bound === 'infinity') {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  if (bound === '-infinity') {\n    return Number.NEGATIVE_INFINITY;\n  }\n\n  return parseType(bound);\n\n}\n\nfunction stringify(data) {\n  if (data === null) {\n    return null;\n  }\n\n  if (!Array.isArray(data)) {\n    throw new TypeError('range must be an array');\n  }\n\n  if (data.length === 0) {\n    return 'empty';\n  }\n\n  if (data.length !== 2) {\n    throw new Error('range array length must be 0 (empty) or 2 (lower and upper bounds)');\n  }\n\n  if (Object.prototype.hasOwnProperty.call(data, 'inclusive')) {\n    if (data.inclusive === false) {\n      data.inclusive = [false, false];\n    } else if (!data.inclusive) {\n      data.inclusive = [true, false];\n    } else if (data.inclusive === true) {\n      data.inclusive = [true, true];\n    }\n  } else {\n    data.inclusive = [true, false];\n  }\n\n  _.each(data, (value, index) => {\n    if (_.isObject(value)) {\n      if (Object.prototype.hasOwnProperty.call(value, 'inclusive')) {\n        data.inclusive[index] = Boolean(value.inclusive);\n      }\n\n      if (Object.prototype.hasOwnProperty.call(value, 'value')) {\n        data[index] = value.value;\n      }\n    }\n  });\n\n  const lowerBound = stringifyRangeBound(data[0]);\n  const upperBound = stringifyRangeBound(data[1]);\n\n  return `${(data.inclusive[0] ? '[' : '(') + lowerBound},${upperBound}${data.inclusive[1] ? ']' : ')'}`;\n}\n\nexports.stringify = stringify;\n\nfunction parse(value, parser) {\n  if (value === null) {\n    return null;\n  }\n\n  if (value === 'empty') {\n    return [];\n  }\n\n  // eslint-disable-next-line unicorn/prefer-string-slice -- TODO\n  let result = value\n    .substring(1, value.length - 1)\n    .split(',', 2);\n\n  if (result.length !== 2) {\n    return value;\n  }\n\n  result = result.map((item, index) => {\n    return {\n      value: parseRangeBound(item, parser),\n      inclusive: index === 0 ? value[0] === '[' : value[value.length - 1] === ']',\n    };\n  });\n\n  return result;\n}\n\nexports.parse = parse;\n"],
  "mappings": ";AAEA,MAAM,IAAI,QAAQ;AAElB,6BAA6B,OAAO;AAClC,MAAI,UAAU,MAAM;AAClB,WAAO;AAAA;AAGT,MAAI,UAAU,OAAO,qBAAqB,UAAU,OAAO,mBAAmB;AAC5E,WAAO,MAAM,WAAW;AAAA;AAG1B,SAAO,KAAK,UAAU;AAAA;AAGxB,yBAAyB,OAAO,WAAW;AACzC,MAAI,CAAC,OAAO;AACV,WAAO;AAAA;AAGT,MAAI,UAAU,YAAY;AACxB,WAAO,OAAO;AAAA;AAGhB,MAAI,UAAU,aAAa;AACzB,WAAO,OAAO;AAAA;AAGhB,SAAO,UAAU;AAAA;AAInB,mBAAmB,MAAM;AACvB,MAAI,SAAS,MAAM;AACjB,WAAO;AAAA;AAGT,MAAI,CAAC,MAAM,QAAQ,OAAO;AACxB,UAAM,IAAI,UAAU;AAAA;AAGtB,MAAI,KAAK,WAAW,GAAG;AACrB,WAAO;AAAA;AAGT,MAAI,KAAK,WAAW,GAAG;AACrB,UAAM,IAAI,MAAM;AAAA;AAGlB,MAAI,OAAO,UAAU,eAAe,KAAK,MAAM,cAAc;AAC3D,QAAI,KAAK,cAAc,OAAO;AAC5B,WAAK,YAAY,CAAC,OAAO;AAAA,eAChB,CAAC,KAAK,WAAW;AAC1B,WAAK,YAAY,CAAC,MAAM;AAAA,eACf,KAAK,cAAc,MAAM;AAClC,WAAK,YAAY,CAAC,MAAM;AAAA;AAAA,SAErB;AACL,SAAK,YAAY,CAAC,MAAM;AAAA;AAG1B,IAAE,KAAK,MAAM,CAAC,OAAO,UAAU;AAC7B,QAAI,EAAE,SAAS,QAAQ;AACrB,UAAI,OAAO,UAAU,eAAe,KAAK,OAAO,cAAc;AAC5D,aAAK,UAAU,SAAS,QAAQ,MAAM;AAAA;AAGxC,UAAI,OAAO,UAAU,eAAe,KAAK,OAAO,UAAU;AACxD,aAAK,SAAS,MAAM;AAAA;AAAA;AAAA;AAK1B,QAAM,aAAa,oBAAoB,KAAK;AAC5C,QAAM,aAAa,oBAAoB,KAAK;AAE5C,SAAO,GAAI,MAAK,UAAU,KAAK,MAAM,OAAO,cAAc,aAAa,KAAK,UAAU,KAAK,MAAM;AAAA;AAGnG,QAAQ,YAAY;AAEpB,eAAe,OAAO,QAAQ;AAC5B,MAAI,UAAU,MAAM;AAClB,WAAO;AAAA;AAGT,MAAI,UAAU,SAAS;AACrB,WAAO;AAAA;AAIT,MAAI,SAAS,MACV,UAAU,GAAG,MAAM,SAAS,GAC5B,MAAM,KAAK;AAEd,MAAI,OAAO,WAAW,GAAG;AACvB,WAAO;AAAA;AAGT,WAAS,OAAO,IAAI,CAAC,MAAM,UAAU;AACnC,WAAO;AAAA,MACL,OAAO,gBAAgB,MAAM;AAAA,MAC7B,WAAW,UAAU,IAAI,MAAM,OAAO,MAAM,MAAM,MAAM,SAAS,OAAO;AAAA;AAAA;AAI5E,SAAO;AAAA;AAGT,QAAQ,QAAQ;",
  "names": []
}
